{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home What is route53-dynamic-dns? A lightweight cli application written in Node that will update an Amazon Route53 hosted zone with your current public IP address on a scheduled interval. This project is a no cost alternative to DynamicDNS services such as Dyn, No-IP, etc. Designed to be simple and efficient and run via a docker container or node.js process . License MIT Route53 Dynamic DNS is licensed under the MIT License . A copy of MIT License is included in this repository. Attribution The following 3rd-party software components may be used by or distributed with route53-dynamic-dns","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#what-is-route53-dynamic-dns","text":"A lightweight cli application written in Node that will update an Amazon Route53 hosted zone with your current public IP address on a scheduled interval. This project is a no cost alternative to DynamicDNS services such as Dyn, No-IP, etc. Designed to be simple and efficient and run via a docker container or node.js process .","title":"What is route53-dynamic-dns?"},{"location":"#license","text":"","title":"License"},{"location":"#mit","text":"Route53 Dynamic DNS is licensed under the MIT License . A copy of MIT License is included in this repository.","title":"MIT"},{"location":"#attribution","text":"The following 3rd-party software components may be used by or distributed with route53-dynamic-dns","title":"Attribution"},{"location":"contributing/","text":"Contributing I'm excited that you want to contribute! Your ongoing support will continue to make this project great. Submitting a Pull Request Fork and clone the repository Configure and install the dependencies Create a new branch Make your changes Test your code Push to your fork and submit a pull request Best practices Keep your changes as focused as possible Update README.MD and any other docs Write a good message","title":"Contributing"},{"location":"contributing/#contributing","text":"I'm excited that you want to contribute! Your ongoing support will continue to make this project great.","title":"Contributing"},{"location":"contributing/#submitting-a-pull-request","text":"Fork and clone the repository Configure and install the dependencies Create a new branch Make your changes Test your code Push to your fork and submit a pull request","title":"Submitting a Pull Request"},{"location":"contributing/#best-practices","text":"Keep your changes as focused as possible Update README.MD and any other docs Write a good message","title":"Best practices"},{"location":"faq/","text":"FAQ I'm using opendns and started getting an error In October 2021, users started experiencing connection issues to openDNS. It appears the server for diagnostic.opendns.com is configured incorrectly and the server's certificate chain is incomplete. This is causing a verification error. Rather than try and download the missing cert in the code I decided it's better to change the default to ifconfig.co and point opendns to ipify.org in the code to support backwards compatibility. This change was made and released as version 1.2.1 in November 2021. It will remain in effect until openDNS resolves their issue. More information is available in this reported issue I keep getting an error and the process won't run Check to make sure all variables are set properly in .env or passed properly into the Docker Container at runtime. Review the documentation on Environment Variables and Docker Usage","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#im-using-opendns-and-started-getting-an-error","text":"In October 2021, users started experiencing connection issues to openDNS. It appears the server for diagnostic.opendns.com is configured incorrectly and the server's certificate chain is incomplete. This is causing a verification error. Rather than try and download the missing cert in the code I decided it's better to change the default to ifconfig.co and point opendns to ipify.org in the code to support backwards compatibility. This change was made and released as version 1.2.1 in November 2021. It will remain in effect until openDNS resolves their issue. More information is available in this reported issue","title":"I'm using opendns and started getting an error"},{"location":"faq/#i-keep-getting-an-error-and-the-process-wont-run","text":"Check to make sure all variables are set properly in .env or passed properly into the Docker Container at runtime. Review the documentation on Environment Variables and Docker Usage","title":"I keep getting an error and the process won't run"},{"location":"issues/","text":"Reporting an Issue Before Submitting an Issue Please follow GitHub Etiquette Please do a search in open issues to see if the issue or feature request has already been filed. If you find your issue already exists, make relevant comments and add your reaction. Submitting an Issue Read FAQ and check to make sure all variables are set properly in .env or passed properly into the Docker Container at runtime. If you are sure your environment variables are correct, please open an issue and provide as much detail as possible.","title":"Reporting an issue"},{"location":"issues/#reporting-an-issue","text":"","title":"Reporting an Issue"},{"location":"issues/#before-submitting-an-issue","text":"Please follow GitHub Etiquette Please do a search in open issues to see if the issue or feature request has already been filed. If you find your issue already exists, make relevant comments and add your reaction.","title":"Before Submitting an Issue"},{"location":"issues/#submitting-an-issue","text":"Read FAQ and check to make sure all variables are set properly in .env or passed properly into the Docker Container at runtime. If you are sure your environment variables are correct, please open an issue and provide as much detail as possible.","title":"Submitting an Issue"},{"location":"config/aws/","text":"AWS Services Minimum AWS IAM Policy Below are examples of minimium IAM policies for Route53 and SES Route53 { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"route53policy1\", \"Effect\": \"Allow\", \"Action\": \"route53:ChangeResourceRecordSets\", \"Resource\": \"arn:aws:route53:::hostedzone/*\" }, { \"Sid\": \"route53policy2\", \"Effect\": \"Allow\", \"Action\": \"route53:TestDNSAnswer\", \"Resource\": \"*\" } ] } SES { \"Effect\": \"Allow\", \"Action\": \"ses:SendEmail\", \"Resource\": \"*\", \"Condition\": { \"ForAllValues:StringLike\": { \"ses:Recipients\": [ \"you@example.org\" ] } } }","title":"AWS Services"},{"location":"config/aws/#aws-services","text":"","title":"AWS Services"},{"location":"config/aws/#minimum-aws-iam-policy","text":"Below are examples of minimium IAM policies for Route53 and SES","title":"Minimum AWS IAM Policy"},{"location":"config/aws/#route53","text":"{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"route53policy1\", \"Effect\": \"Allow\", \"Action\": \"route53:ChangeResourceRecordSets\", \"Resource\": \"arn:aws:route53:::hostedzone/*\" }, { \"Sid\": \"route53policy2\", \"Effect\": \"Allow\", \"Action\": \"route53:TestDNSAnswer\", \"Resource\": \"*\" } ] }","title":"Route53"},{"location":"config/aws/#ses","text":"{ \"Effect\": \"Allow\", \"Action\": \"ses:SendEmail\", \"Resource\": \"*\", \"Condition\": { \"ForAllValues:StringLike\": { \"ses:Recipients\": [ \"you@example.org\" ] } } }","title":"SES"},{"location":"config/env/","text":"Environment Variables Environment variables are required to run the process. ----------------------------------------------------------------------- VARIABLE TYPE COMMENTS ----------------------------------------------------------------------- AWS_ACCESS_KEY_ID string AWS Access Key for IAM user AWS_SECRET_ACCESS_KEY string AWS Secret Access Key for IAM user AWS_REGION string AWS Region; ex: \"us-east-1\" ROUTE53_HOSTED_ZONE_ID string AWS Route53 Hosted Zone ID; ex: \"Z25S75OFY0ERQD\" ROUTE53_DOMAIN string AWS Route53 FQDN; ex: \"home.example.com\" ROUTE53_TYPE string AWS Route 53 record type for FQDN; ex: \"A\" ROUTE53_TTL integer AWS Route 53 TTL in seconds for FQDN; ex: 60 SEND_EMAIL_SES boolean Case sensative, default: `false` - use AWS SES to send notification email. ex: true SES_TO_ADDRESS string If SEND_EMAIL_SES = true then required, 'To' address for email; ex: \"admin@example.com\" SES_FROM_ADDRESS string If SEND_EMAIL_SES = true then `required`, 'To' address for email; ex: \"admin@example.com\" UPDATE_FREQUENCY integer default: `60000 (1m)` - Interval in Milliseconds to check if Public IP has changed; ex: 60000 (which is every minute) IPCHECKER string default: `ifconfig.co` - Public IP checker service. 'ifconfig.co' or 'ipify.org'. See note below for 'opendns' LOG_TO_STDOUT boolean Case sensative, default: `false` - Flag to set log to STDOUT rather than to the application log file. For help setting up IAM user access see AWS Javascript SDK - Getting Started . As of November 2021, 'opendns' option is not working because the server's certificate chain is incomplete. The latest release temporarily points 'opendns' option to 'ipify.org'. This change will be removed after server config is fixed. More info in this issue . Minimium ENV Variables Run with default values AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value] Enable SES Emails Run with SES Emails. Make sure IAM policy exists to use SES services. See AWS Services AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value] SEND_EMAIL_SES=true SES_TO_ADDRESS=[value] SES_FROM_ADDRESS=[value] Full Configuration Run with all options ( LOG_TO_STDOUT=true is recommended setting in container) AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value] SEND_EMAIL_SES=[true or false] SES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] SES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] UPDATE_FREQUENCY=60000 IPCHECKER=ifconfig.co LOG_TO_STDOUT=false","title":"Environment Variables"},{"location":"config/env/#environment-variables","text":"Environment variables are required to run the process. ----------------------------------------------------------------------- VARIABLE TYPE COMMENTS ----------------------------------------------------------------------- AWS_ACCESS_KEY_ID string AWS Access Key for IAM user AWS_SECRET_ACCESS_KEY string AWS Secret Access Key for IAM user AWS_REGION string AWS Region; ex: \"us-east-1\" ROUTE53_HOSTED_ZONE_ID string AWS Route53 Hosted Zone ID; ex: \"Z25S75OFY0ERQD\" ROUTE53_DOMAIN string AWS Route53 FQDN; ex: \"home.example.com\" ROUTE53_TYPE string AWS Route 53 record type for FQDN; ex: \"A\" ROUTE53_TTL integer AWS Route 53 TTL in seconds for FQDN; ex: 60 SEND_EMAIL_SES boolean Case sensative, default: `false` - use AWS SES to send notification email. ex: true SES_TO_ADDRESS string If SEND_EMAIL_SES = true then required, 'To' address for email; ex: \"admin@example.com\" SES_FROM_ADDRESS string If SEND_EMAIL_SES = true then `required`, 'To' address for email; ex: \"admin@example.com\" UPDATE_FREQUENCY integer default: `60000 (1m)` - Interval in Milliseconds to check if Public IP has changed; ex: 60000 (which is every minute) IPCHECKER string default: `ifconfig.co` - Public IP checker service. 'ifconfig.co' or 'ipify.org'. See note below for 'opendns' LOG_TO_STDOUT boolean Case sensative, default: `false` - Flag to set log to STDOUT rather than to the application log file. For help setting up IAM user access see AWS Javascript SDK - Getting Started . As of November 2021, 'opendns' option is not working because the server's certificate chain is incomplete. The latest release temporarily points 'opendns' option to 'ipify.org'. This change will be removed after server config is fixed. More info in this issue .","title":"Environment Variables"},{"location":"config/env/#minimium-env-variables","text":"Run with default values AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value]","title":"Minimium ENV Variables"},{"location":"config/env/#enable-ses-emails","text":"Run with SES Emails. Make sure IAM policy exists to use SES services. See AWS Services AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value] SEND_EMAIL_SES=true SES_TO_ADDRESS=[value] SES_FROM_ADDRESS=[value]","title":"Enable SES Emails"},{"location":"config/env/#full-configuration","text":"Run with all options ( LOG_TO_STDOUT=true is recommended setting in container) AWS_ACCESS_KEY_ID=[SECRET] AWS_SECRET_ACCESS_KEY=[SECRET] AWS_REGION=[REGION] ROUTE53_HOSTED_ZONE_ID=[value] ROUTE53_DOMAIN=[value] ROUTE53_TYPE=[value] ROUTE53_TTL=[value] SEND_EMAIL_SES=[true or false] SES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] SES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] UPDATE_FREQUENCY=60000 IPCHECKER=ifconfig.co LOG_TO_STDOUT=false","title":"Full Configuration"},{"location":"install/docker/","text":"Docker Image is built from official node:alpine image, which runs on the popular Alpine Linux project . Alpine Linux is much smaller than most distribution base images (~5MB), which leads to much slimmer images in general. If you are not familiar with Docker, please start by reading Getting Started section of Official Docker Documentation . Versions route53-dynamic-dns:latest Points to latest stable version. Every attempt is made to keep releases backwards compatible. Project follows Semantic Versioning . You can expect breaking changes may exist in MAJOR versions (1.X.X -> 2.X.X), but they should not exist in MINOR and PATCH versions. Since project inception there has not been a release that is not backwards compatible. The code base is stable. There is no expectation of issues with backwards compatibility in future versions, but everyone should be aware of how versions are managed. For most people looking to be hands off on upgrades, it should be safe to use latest version. If your primary concern is stability, it is recommended that you use a specific version (see below). route53-dynamic-dns:v1.2.1 Stable version built from tag v1.2.1 . The code is also available as GitHub Release with tag v1.2.1 . route53-dynamic-dns:dev Automated build triggers with every git push to master branch. This version is not guarenteed to be stable. If you are looking for a stable version, please use route53-dynamic-dns:v1.2.1 or route53-dynamic-dns:latest . Pull Image Pull image from DockerHub. Replace [version] with desired version (ex: v1.2.1 ). $ docker pull sjmayotte/route53-dynamic-dns:[verison]","title":"Docker"},{"location":"install/docker/#docker","text":"Image is built from official node:alpine image, which runs on the popular Alpine Linux project . Alpine Linux is much smaller than most distribution base images (~5MB), which leads to much slimmer images in general. If you are not familiar with Docker, please start by reading Getting Started section of Official Docker Documentation .","title":"Docker"},{"location":"install/docker/#versions","text":"","title":"Versions"},{"location":"install/docker/#route53-dynamic-dnslatest","text":"Points to latest stable version. Every attempt is made to keep releases backwards compatible. Project follows Semantic Versioning . You can expect breaking changes may exist in MAJOR versions (1.X.X -> 2.X.X), but they should not exist in MINOR and PATCH versions. Since project inception there has not been a release that is not backwards compatible. The code base is stable. There is no expectation of issues with backwards compatibility in future versions, but everyone should be aware of how versions are managed. For most people looking to be hands off on upgrades, it should be safe to use latest version. If your primary concern is stability, it is recommended that you use a specific version (see below).","title":"route53-dynamic-dns:latest"},{"location":"install/docker/#route53-dynamic-dnsv121","text":"Stable version built from tag v1.2.1 . The code is also available as GitHub Release with tag v1.2.1 .","title":"route53-dynamic-dns:v1.2.1"},{"location":"install/docker/#route53-dynamic-dnsdev","text":"Automated build triggers with every git push to master branch. This version is not guarenteed to be stable. If you are looking for a stable version, please use route53-dynamic-dns:v1.2.1 or route53-dynamic-dns:latest .","title":"route53-dynamic-dns:dev"},{"location":"install/docker/#pull-image","text":"Pull image from DockerHub. Replace [version] with desired version (ex: v1.2.1 ). $ docker pull sjmayotte/route53-dynamic-dns:[verison]","title":"Pull Image"},{"location":"install/node/","text":"Node.js Process Steps below assume you have Node.js and NPM installed on machine. If you do not, please download and install Node.js and NPM before proceeding. Download Release Download release version from release repository . For example, you can use v1.2.1.tar.gz to download source for release tag v1.2.1 . $ curl -sL https://github.com/sjmayotte/route53-dynamic-dns/archive/[version] | tar xz $ cd route53-dynamic-dns Set Environment Variables You have the option to pass environment variables at runtime or populate environment variables in .env . Release package includes .env.example , which can be renamed to .env and populated with values. The process expects .env will be in root of directory structure. $ cp .env.example .env $ vi .env $ # Update .env with values and save file $ rm .env.example See Minimium ENV Variables for example of minimium configuration. Installation Project uses NPM package manager. Install dependencies from package.json . $ npm install","title":"Node Process"},{"location":"install/node/#nodejs-process","text":"Steps below assume you have Node.js and NPM installed on machine. If you do not, please download and install Node.js and NPM before proceeding.","title":"Node.js Process"},{"location":"install/node/#download-release","text":"Download release version from release repository . For example, you can use v1.2.1.tar.gz to download source for release tag v1.2.1 . $ curl -sL https://github.com/sjmayotte/route53-dynamic-dns/archive/[version] | tar xz $ cd route53-dynamic-dns","title":"Download Release"},{"location":"install/node/#set-environment-variables","text":"You have the option to pass environment variables at runtime or populate environment variables in .env . Release package includes .env.example , which can be renamed to .env and populated with values. The process expects .env will be in root of directory structure. $ cp .env.example .env $ vi .env $ # Update .env with values and save file $ rm .env.example See Minimium ENV Variables for example of minimium configuration.","title":"Set Environment Variables"},{"location":"install/node/#installation","text":"Project uses NPM package manager. Install dependencies from package.json . $ npm install","title":"Installation"},{"location":"usage/docker/","text":"Docker Run Container Examples See Docker Run Reference for full list of options. Minimium ENV Variables Run container with default values (see: Environment Variables ) $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ sjmayotte/route53-dynamic-dns:[verison] Enable SES Emails Run container with SES Emails (see: Environment Variables ) $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ -e SEND_EMAIL_SES=true \\ -e SES_TO_ADDRESS=[value] \\ -e SES_FROM_ADDRESS=[value] \\ sjmayotte/route53-dynamic-dns:[verison] Full Configuration Run container with all options (see: Environment Variables ). LOG_TO_STDOUT=true is recommended setting in container. $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ -e SEND_EMAIL_SES=[true or false] \\ -e SES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\ -e SES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\ -e UPDATE_FREQUENCY=60000 \\ -e IPCHECKER=ifconfig.co \\ -e LOG_TO_STDOUT=true \\ sjmayotte/route53-dynamic-dns:[verison] View Useful Container Data Determine CONTAINER ID for container started in previous step. $ docker ps -a Sample output CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9998c92ff8a1 sjmayotte/route53-dynamic-dns \"npm start\" 45 seconds ago Up 44 seconds route53-dynamic-dns View logs of STDOUT from CONTAINER ID (copy from output above) $ docker logs [CONTAINER ID] View Node.js process log, which is written to application.log in project root directory. See: Logs for more details. $ docker exec -it [CONTAINER ID] sh /usr/src/app > ls -la /usr/src/app > tail -f application.log If running container with LOG_TO_STDOUT=true you will see logs in STDOUT.","title":"Docker"},{"location":"usage/docker/#docker","text":"","title":"Docker"},{"location":"usage/docker/#run-container-examples","text":"See Docker Run Reference for full list of options.","title":"Run Container Examples"},{"location":"usage/docker/#minimium-env-variables","text":"Run container with default values (see: Environment Variables ) $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ sjmayotte/route53-dynamic-dns:[verison]","title":"Minimium ENV Variables"},{"location":"usage/docker/#enable-ses-emails","text":"Run container with SES Emails (see: Environment Variables ) $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ -e SEND_EMAIL_SES=true \\ -e SES_TO_ADDRESS=[value] \\ -e SES_FROM_ADDRESS=[value] \\ sjmayotte/route53-dynamic-dns:[verison]","title":"Enable SES Emails"},{"location":"usage/docker/#full-configuration","text":"Run container with all options (see: Environment Variables ). LOG_TO_STDOUT=true is recommended setting in container. $ docker run -d -t -i --rm \\ --name route53-dynamic-dns \\ -e AWS_ACCESS_KEY_ID=[SECRET] \\ -e AWS_SECRET_ACCESS_KEY=[SECRET] \\ -e AWS_REGION=[REGION] \\ -e ROUTE53_HOSTED_ZONE_ID=[value] \\ -e ROUTE53_DOMAIN=[value] \\ -e ROUTE53_TYPE=[value] \\ -e ROUTE53_TTL=[value] \\ -e SEND_EMAIL_SES=[true or false] \\ -e SES_TO_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\ -e SES_FROM_ADDRESS=[if SEND_EMAIL_SES = true then value else empty] \\ -e UPDATE_FREQUENCY=60000 \\ -e IPCHECKER=ifconfig.co \\ -e LOG_TO_STDOUT=true \\ sjmayotte/route53-dynamic-dns:[verison]","title":"Full Configuration"},{"location":"usage/docker/#view-useful-container-data","text":"Determine CONTAINER ID for container started in previous step. $ docker ps -a Sample output CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9998c92ff8a1 sjmayotte/route53-dynamic-dns \"npm start\" 45 seconds ago Up 44 seconds route53-dynamic-dns View logs of STDOUT from CONTAINER ID (copy from output above) $ docker logs [CONTAINER ID] View Node.js process log, which is written to application.log in project root directory. See: Logs for more details. $ docker exec -it [CONTAINER ID] sh /usr/src/app > ls -la /usr/src/app > tail -f application.log If running container with LOG_TO_STDOUT=true you will see logs in STDOUT.","title":"View Useful Container Data"},{"location":"usage/logs/","text":"Logs STDOUT When Node.js process starts it writes useful data to STDOUT . Example output: Log4js initialized with level INFO Logs located in application.log in working directory If running in Docker Container use the following command to access a shell: docker exec -it [container_id] sh If you set ENV variable LOG_TO_STDOUT=true then logs will send to STDOUT. application.log Application logs are written to application.log in root project directory. Log files are compressed and archived after reaching 10MB in size. The most recent 3 archives are kept in rotation. All other archives are deleted to keep footprint small. This is ignored if LOG_TO_STDOUT=true .","title":"Logs"},{"location":"usage/logs/#logs","text":"","title":"Logs"},{"location":"usage/logs/#stdout","text":"When Node.js process starts it writes useful data to STDOUT . Example output: Log4js initialized with level INFO Logs located in application.log in working directory If running in Docker Container use the following command to access a shell: docker exec -it [container_id] sh If you set ENV variable LOG_TO_STDOUT=true then logs will send to STDOUT.","title":"STDOUT"},{"location":"usage/logs/#applicationlog","text":"Application logs are written to application.log in root project directory. Log files are compressed and archived after reaching 10MB in size. The most recent 3 archives are kept in rotation. All other archives are deleted to keep footprint small. This is ignored if LOG_TO_STDOUT=true .","title":"application.log"},{"location":"usage/node/","text":"Node.js Process Run Process Start Node.js process which will run forever (or until process is stopped by user). $ npm start The Node.js process writes useful data to log files. See Logs section for more information.","title":"Node Process"},{"location":"usage/node/#nodejs-process","text":"","title":"Node.js Process"},{"location":"usage/node/#run-process","text":"Start Node.js process which will run forever (or until process is stopped by user). $ npm start The Node.js process writes useful data to log files. See Logs section for more information.","title":"Run Process"}]}